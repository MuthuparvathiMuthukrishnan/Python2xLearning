{"name": "Test Authentication", "status": "broken", "statusDetails": {"message": "TypeError: Session.request() got an unexpected keyword argument 'header'", "trace": "@allure.title(\"Test Authentication\")\n    @allure.description(\"TC#1 - Verify the create booking!\")\n    @pytest.mark.crud\n    def test_case_booking_positive():\n        pass\n        #Request\n        #URL\n        #Methods\n        #Headers\n        #Payloads/Data/Body\n        #Auth(no)\n        #Auth(in post)\n        base_URL = 'https://restful-booker.herokuapp.com/'\n        base_path = '/booking'\n        URL = base_URL+base_path\n        headers = {'Content-Type':'application/json'}\n        payload = {\n        \"firstname\" : \"Jim\",\n        \"lastname\" : \"Brown\",\n        \"totalprice\" : 111,\n        \"depositpaid\" : True,\n        \"bookingdates\" : {\n            \"checkin\" : \"2018-01-01\",\n            \"checkout\" : \"2019-01-01\"\n        },\n        \"additionalneeds\" : \"Breakfast\"\n    }\n>       response = requests.post(url=URL,header=headers,json=payload)\n\ntest_lab154.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\new\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmethod = 'post', url = 'https://restful-booker.herokuapp.com//booking'\nkwargs = {'data': None, 'header': {'Content-Type': 'application/json'}, 'json': {'additionalneeds': 'Breakfast', 'bookingdates': {'checkin': '2018-01-01', 'checkout': '2019-01-01'}, 'depositpaid': True, 'firstname': 'Jim', ...}}\nsession = <requests.sessions.Session object at 0x0000021B419B1460>\n\n    def request(method, url, **kwargs):\n        \"\"\"Constructs and sends a :class:`Request <Request>`.\n    \n        :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary, list of tuples or bytes to send\n            in the query string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n        :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n            ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n            or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string\n            defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n            to add for the file.\n        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send data\n            before giving up, as a float, or a :ref:`(connect timeout, read\n            timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n                the server's TLS certificate, or a string, in which case it must be a path\n                to a CA bundle to use. Defaults to ``True``.\n        :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n        :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n        :return: :class:`Response <Response>` object\n        :rtype: requests.Response\n    \n        Usage::\n    \n          >>> import requests\n          >>> req = requests.request('GET', 'https://httpbin.org/get')\n          >>> req\n          <Response [200]>\n        \"\"\"\n    \n        # By using the 'with' statement we are sure the session is closed, thus we\n        # avoid leaving sockets open which can trigger a ResourceWarning in some\n        # cases, and look like a memory leak in others.\n        with sessions.Session() as session:\n>           return session.request(method=method, url=url, **kwargs)\nE           TypeError: Session.request() got an unexpected keyword argument 'header'\n\nC:\\Users\\new\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\requests\\api.py:59: TypeError"}, "description": "TC#1 - Verify the create booking!", "start": 1712142936795, "stop": 1712142936796, "uuid": "7b8b0bc5-8bfe-4dd9-a54e-45c214096623", "historyId": "dcde08c209667b77a889c8bdb0512251", "testCaseId": "dcde08c209667b77a889c8bdb0512251", "fullName": "test_lab154#test_case_booking_positive", "labels": [{"name": "tag", "value": "crud"}, {"name": "suite", "value": "test_lab154"}, {"name": "host", "value": "DESKTOP-53MF220"}, {"name": "thread", "value": "21164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_lab154"}]}